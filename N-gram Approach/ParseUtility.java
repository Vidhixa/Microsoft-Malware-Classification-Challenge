import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import org.apache.lucene.document.Document;
import org.apache.lucene.document.TextField;
import org.apache.lucene.document.Field.Store;
import org.apache.lucene.index.IndexWriter;


public class ParseUtility {
	
	
	public void parseFile(String filename,Map<String,Boolean> instructionMap,IndexWriter writer) throws IOException {
	//public void parseFile(String filename,Map<String,Boolean> instructionMap,List<Document> docs) throws IOException{
			Document doc = new Document();
			StringBuilder sbNgram = new StringBuilder();StringBuilder wholeLine = new StringBuilder();
			String line;String[] temp;
			InputStream in = new FileInputStream(filename+".asm");
			BufferedReader bufferReader = new BufferedReader(new InputStreamReader(in),100000);
			String s1,s2="";
			s1 = bufferReader.readLine(); 
			String opcodeStr;
			Pattern pattern = Pattern.compile("^.*:([A-F0-9]*)\\s+.*");
			Matcher mat;
			mat = pattern.matcher(s1);
			if(mat.matches()) 
				s1 = mat.group(1).trim();
			while((line = bufferReader.readLine()) !=  null) {
				if(line.startsWith("HEADER")) continue;
				if(line.indexOf(";") > -1)
					line = line.substring(0,line.indexOf(";"));
				mat = pattern.matcher(line);
				if(mat.matches()) {
					s2 = mat.group(1).trim();
					if(!s1.equals(s2) && s1.length() > 0 && s2.length() > 0) {
						sbNgram.append(getHexDiff(s1,s2));
						sbNgram.append(" ");
					}
				}
				s1 = s2;
				line = line.replaceAll("[A-F0-9]*", "");
				temp = splitWithNonEmptyEntries(line, "\t");
				if(temp.length > 1) {
					opcodeStr = temp[1].trim();
					temp = opcodeStr.split("\\s+");
					for(String str: temp){
						opcodeStr = str.trim();
						if(instructionMap.containsKey(opcodeStr)){
							wholeLine.append(opcodeStr);
							wholeLine.append(" ");
							break;
						}
					}
				}
			}
			bufferReader.close();
			doc.add(new TextField("name",filename,Store.YES));
			doc.add(new VecTextField("ngramData",sbNgram.toString(),Store.YES));
			doc.add(new VecTextField("opcodeData",wholeLine.toString(),Store.YES));
			/*synchronized (docs) {
				docs.add(doc);
			}*/
			writer.addDocument(doc);
		}
	
		public String[] splitWithNonEmptyEntries(String input,String delim){
			
			List<String> list = new ArrayList<String>(); 
			String temp[] = input.split(delim);
			for(String str: temp){
				if(str.trim().length() > 0){
					list.add(str);
				}
			}
			return list.toArray(new String[list.size()]);
		}
		
		
		public String  getHexDiff(String s1,String s2) {
			
			if(s1.length() > 8) {	
				s1 = s1.substring(s1.length() - 8);
			}
			Long n1 = Long.parseLong(s1,16);
			Long n2 = Long.parseLong(s2,16);
			return String.valueOf(n2 - n1);
			
		}
		
		public static void makeMap(Map<String, Boolean> instruction)
		{
				
			instruction.put("aaa",true);
			instruction.put("aad",true);
			instruction.put("aam",true);
			instruction.put("aas",true);
			instruction.put("adc",true);
			instruction.put("add",true);
			instruction.put("and",true);
			instruction.put("call",true);
			instruction.put("cbw",true);
			instruction.put("clc",true);
			instruction.put("cld",true);
			instruction.put("cli",true);
			instruction.put("cmc",true);
			instruction.put("cmp",true);
			instruction.put("cmpsb",true);
			instruction.put("cmpsw",true);
			instruction.put("cwd",true);
			instruction.put("daa",true);
			instruction.put("das",true);
			instruction.put("dec",true);
			instruction.put("div",true);
			instruction.put("esc",true);
			instruction.put("hlt",true);
			instruction.put("idiv",true);
			instruction.put("imul",true);
			instruction.put("in",true);
			instruction.put("inc",true);
			instruction.put("int",true);
			instruction.put("into",true);
			instruction.put("iret",true);
			instruction.put("jcc",true);
			instruction.put("jcxz",true);
			instruction.put("jmp",true);
			instruction.put("lahf",true);
			instruction.put("lea",true);
			instruction.put("les",true);
			instruction.put("lock",true);
			instruction.put("lodsb",true);
			instruction.put("lodsb",true);
			instruction.put("loop",true);
			instruction.put("mov",true);
			instruction.put("movsb",true);
			instruction.put("movsw",true);
			instruction.put("mul",true);
			instruction.put("neg",true);
			instruction.put("nop",true);
			instruction.put("not",true);
			instruction.put("or",true);
			instruction.put("out",true);
			instruction.put("pop",true);
			instruction.put("popf",true);
			instruction.put("push",true);
			instruction.put("pushf",true);
			instruction.put("rcl",true);
			instruction.put("rcr",true);
			instruction.put("ret",true);
			instruction.put("retn",true);
			instruction.put("retl",true);
			instruction.put("rol",true);
			instruction.put("ror",true);
			instruction.put("sahf",true);
			instruction.put("sal",true);
			instruction.put("sar",true);
			instruction.put("sbb",true);
			instruction.put("scasb",true);
			instruction.put("scasw",true);
			instruction.put("shl",true);
			instruction.put("shr",true);
			instruction.put("stc",true);
			instruction.put("std",true);
			instruction.put("sti",true);
			instruction.put("stosb",true);
			instruction.put("stosw",true);
			instruction.put("sub",true);
			instruction.put("test",true);
			instruction.put("wait",true);
			instruction.put("xchg",true);
			instruction.put("xlat",true);
			instruction.put("xor",true);
			
			instruction.put("bound",true);
			instruction.put("ins",true);
			instruction.put("enter",true);
			instruction.put("leave",true);
			instruction.put("outs",true);
			instruction.put("popa",true);
			
			instruction.put("arpl",true);
			instruction.put("clts",true);
			instruction.put("lar",true);
			instruction.put("lgdt",true);
			instruction.put("lidt",true);
			instruction.put("lldt",true);
			instruction.put("lmsw",true);
			instruction.put("loadall",true);
			instruction.put("lsl",true);
			instruction.put("ltr",true);
			instruction.put("sgdt",true);
			instruction.put("sidt",true);
			instruction.put("sldt",true);
			instruction.put("smsw",true);
			instruction.put("str",true);
			instruction.put("verr",true);
			instruction.put("verw",true);
			
			instruction.put("bsf",true);
			instruction.put("bsr",true);
			instruction.put("bt",true);
			instruction.put("btc",true);
			instruction.put("btr",true);
			instruction.put("bts",true);
			instruction.put("cdq",true);
			instruction.put("cmpsd",true);
			instruction.put("cwde",true);
			instruction.put("insd",true);
			instruction.put("jecxz",true);
			instruction.put("lfs",true);
			instruction.put("lgs",true);
			instruction.put("lss",true);
			instruction.put("lodsd",true);
			instruction.put("movsd",true);
			instruction.put("movsx",true);
			instruction.put("movzx",true);
			instruction.put("outsd",true);
			instruction.put("popad",true);
			instruction.put("popfd",true);
			instruction.put("pushad",true);
			instruction.put("pushfd",true);
			instruction.put("lodsd",true);
			instruction.put("scasd",true);
			instruction.put("setcc",true);
			instruction.put("shld",true);
			instruction.put("shrd",true);
			instruction.put("stosd",true);
			
			instruction.put("jnz",true);
			instruction.put("jb",true);
			instruction.put("ja",true);
			instruction.put("jbe",true);
		}
		
		

}
