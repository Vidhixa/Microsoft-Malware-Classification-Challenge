import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;
import java.util.TreeMap;


public class count 
{
	
	public static void makeMap(HashMap<String, Long> instruction)
	{
		instruction.clear();
		
		instruction.put("aaa",0L);
		instruction.put("aad",0L);
		instruction.put("aam",0L);
		instruction.put("aas",0L);
		instruction.put("adc",0L);
		instruction.put("add",0L);
		instruction.put("and", 0L);
		instruction.put("call",0L);
		instruction.put("cbw",0L);
		instruction.put("clc",0L);
		instruction.put("cld", 0L);
		instruction.put("cli", 0L);
		instruction.put("cmc", 0L);
		instruction.put("cmp", 0L);
		instruction.put("cmpsb", 0L);
		instruction.put("cmpsw", 0L);
		instruction.put("cwd", 0L);
		instruction.put("daa", 0L);
		instruction.put("das", 0L);
		instruction.put("dec", 0L);
		instruction.put("div", 0L);
		instruction.put("esc", 0L);
		instruction.put("hlt", 0L);
		instruction.put("idiv", 0L);
		instruction.put("imul", 0L);
		instruction.put("in", 0L);
		instruction.put("inc", 0L);
		instruction.put("int", 0L);
		instruction.put("into", 0L);
		instruction.put("iret", 0L);
		instruction.put("jcc", 0L);
		instruction.put("jcxz", 0L);
		instruction.put("jmp", 0L);
		instruction.put("lahf", 0L);
		instruction.put("lea", 0L);
		instruction.put("les", 0L);
		instruction.put("lock", 0L);
		instruction.put("lodsb", 0L);
		instruction.put("lodsb", 0L);
		instruction.put("loop", 0L);
		instruction.put("mov", 0L);
		instruction.put("movsb", 0L);
		instruction.put("movsw", 0L);
		instruction.put("mul", 0L);
		instruction.put("neg", 0L);
		instruction.put("nop", 0L);
		instruction.put("not", 0L);
		instruction.put("or", 0L);
		instruction.put("out", 0L);
		instruction.put("pop", 0L);
		instruction.put("popf", 0L);
		instruction.put("push", 0L);
		instruction.put("pushf", 0L);
		instruction.put("rcl", 0L);
		instruction.put("rcr", 0L);
		instruction.put("ret", 0L);
		instruction.put("retn", 0L);
		instruction.put("retl", 0L);
		instruction.put("rol", 0L);
		instruction.put("ror", 0L);
		instruction.put("sahf", 0L);
		instruction.put("sal", 0L);
		instruction.put("sar", 0L);
		instruction.put("sbb", 0L);
		instruction.put("scasb", 0L);
		instruction.put("scasw", 0L);
		instruction.put("shl", 0L);
		instruction.put("shr", 0L);
		instruction.put("stc", 0L);
		instruction.put("std", 0L);
		instruction.put("sti", 0L);
		instruction.put("stosb", 0L);
		instruction.put("stosw", 0L);
		instruction.put("sub", 0L);
		instruction.put("test", 0L);
		instruction.put("wait", 0L);
		instruction.put("xchg", 0L);
		instruction.put("xlat", 0L);
		instruction.put("xor", 0L);
		
		instruction.put("bound", 0L);
		instruction.put("ins", 0L);
		instruction.put("enter", 0L);
		instruction.put("leave", 0L);
		instruction.put("outs", 0L);
		instruction.put("popa", 0L);
		
		instruction.put("arpl", 0L);
		instruction.put("clts", 0L);
		instruction.put("lar", 0L);
		instruction.put("lgdt", 0L);
		instruction.put("lidt", 0L);
		instruction.put("lldt", 0L);
		instruction.put("lmsw", 0L);
		instruction.put("loadall", 0L);
		instruction.put("lsl", 0L);
		instruction.put("ltr", 0L);
		instruction.put("sgdt", 0L);
		instruction.put("sidt", 0L);
		instruction.put("sldt", 0L);
		instruction.put("smsw", 0L);
		instruction.put("str", 0L);
		instruction.put("verr", 0L);
		instruction.put("verw", 0L);
		
		instruction.put("bsf", 0L);
		instruction.put("bsr", 0L);
		instruction.put("bt", 0L);
		instruction.put("btc", 0L);
		instruction.put("btr", 0L);
		instruction.put("bts", 0L);
		instruction.put("cdq", 0L);
		instruction.put("cmpsd", 0L);
		instruction.put("cwde", 0L);
		instruction.put("insd", 0L);
		instruction.put("jecxz", 0L);
		instruction.put("lfs", 0L);
		instruction.put("lgs", 0L);
		instruction.put("lss", 0L);
		instruction.put("lodsd", 0L);
		instruction.put("movsd", 0L);
		instruction.put("movsx", 0L);
		instruction.put("movzx", 0L);
		instruction.put("outsd", 0L);
		instruction.put("popad", 0L);
		instruction.put("popfd", 0L);
		instruction.put("pushad", 0L);
		instruction.put("pushfd", 0L);
		instruction.put("lodsd", 0L);
		instruction.put("scasd", 0L);
		instruction.put("setcc", 0L);
		instruction.put("shld", 0L);
		instruction.put("shrd", 0L);
		instruction.put("stosd", 0L);
		
		instruction.put("jnz", 0L);
		instruction.put("jb", 0L);
		instruction.put("ja", 0L);
		instruction.put("jbe", 0L);
	}
	
	public static void makeByteMap(HashMap<String, Long> byteMap)
	{
		byteMap.clear();
		for(int i=0;i<256;++i)
		{
			byteMap.put(String.format("%02X", (0xFF & i)), 0L);
		}
		byteMap.put("??", 0L);
	}
	
	public static long readByteFile(String file,HashMap<String, Long> byteCount) throws IOException
	{
		file = "J:\\MicrosoftDataChallenge\\train\\"+file;
		//file = "H:\\test\\"+file;
		FileReader fileReader = new FileReader(file);
		BufferedReader reader = new BufferedReader(fileReader);
	    String  line = null;
	    long total = 0;
	    while((line = reader.readLine()) != null ) 
	    {
	    	String[] words = line.split("\\s+");
	    	for(int i =1; i<words.length;++i)
			{
	    		if(byteCount.containsKey(words[i]))
				{
	    			++total;
	    			byteCount.put(words[i], byteCount.get(words[i])+1);
				}
			}
	    }
	    return total;
	}
	
	public static  long readFile(String file,HashMap<String, Long> instruction) throws IOException 
	{		
		file = "J:\\MicrosoftDataChallenge\\train\\"+file;
		//file = "H:\\test\\"+file;
		FileReader fileReader = new FileReader(file);
		BufferedReader reader = new BufferedReader(fileReader);
	    String line = null;
	    long total = 0;
	    while((line = reader.readLine()) != null ) 
	    {
	    	if(line.startsWith(".text"))
	    	{
		    	String[] words = line.split("\\s+");
		    	for(int i =0; i<words.length;++i)
				{
		    		if(instruction.containsKey(words[i]))
					{
		    			++total;
						 instruction.put(words[i], instruction.get(words[i])+1);
					}
				}
	    	}
		}
	    return total;
	}
	


	static String roundOffTo2DecPlaces(double val)
	{
		String sr = String.format("%.2f", val);
		return sr;
	}


	
	public static void getTrainlabels(HashMap<String,Integer> trainLabel) throws IOException
	{
		String path = "J:\\MicrosoftDataChallenge\\trainLabels.csv";
		File file = new File(path);
		FileReader fileReader = new FileReader(file);
		BufferedReader reader = new BufferedReader(fileReader);
	    String         line = null;
	    line = reader.readLine();//for firstline
	    while((line = reader.readLine()) != null ) 
	    {
	    	String[] words = line.split(",");
	    	assert(words.length == 2);
	    	trainLabel.put(words[0], Integer.parseInt(words[1]));
	    }
	}

	
	public static void main(String[] args) throws IOException
	{
		File outFileASM = new File("C:\\Users\\$uh@$\\Desktop\\consolidationTrainASM.csv");
		if (!outFileASM.exists()) {
			outFileASM.createNewFile();
		}
		FileWriter fwASM = new FileWriter(outFileASM.getAbsoluteFile());
		BufferedWriter bwASM = new BufferedWriter(fwASM);
		
		File outFileBYTE = new File("C:\\Users\\$uh@$\\Desktop\\consolidationTrainBYTE.csv");
		if (!outFileBYTE.exists()) {
			outFileBYTE.createNewFile();
		}
		FileWriter fwBYTE = new FileWriter(outFileBYTE.getAbsoluteFile());
		BufferedWriter bwBYTE = new BufferedWriter(fwBYTE);
		
		File virusFiles = new File("C:\\Users\\$uh@$\\Desktop\\VirusNamesTrain.csv");
		if (!virusFiles.exists()) {
			virusFiles.createNewFile();
		}
		FileWriter fwVirus = new FileWriter(virusFiles.getAbsoluteFile());
		BufferedWriter bwVirus = new BufferedWriter(fwVirus);
		
		
		
		String path = "J:\\MicrosoftDataChallenge\\train";
		//String path ="H:\\test";
		File _dataDir = new File(path);
		
		HashMap<String, Long> instruction = new HashMap<>();
		HashMap<String, Long> byteCount = new HashMap<>();
		
 		HashMap<String,Integer> trainLabel = new HashMap<>();
		getTrainlabels(trainLabel);
				
		int count = 0;
		for (File file: _dataDir.listFiles())
		{
			String fileName = file.getName();
			if(fileName.contains(".asm"))
			{
				long total = 0;
				makeMap(instruction);
				total = readFile(fileName,instruction);
				
				TreeMap<String, Long> treeInstruction = new TreeMap<>();
				treeInstruction.putAll(instruction);
				
				if(total !=0)
				{
					Iterator begin = treeInstruction.entrySet().iterator();
					while(begin.hasNext())
					{
						Map.Entry pairs = (Map.Entry)begin.next();
						
						bwASM.write(roundOffTo2DecPlaces(Double.parseDouble(pairs.getValue().toString())*10000/total)+",");
						
					}
					fileName = fileName.substring(0, fileName.indexOf(".asm"));
					bwASM.write(fileName+",");
					fileName = "\""+fileName+"\"";
					bwASM.write(trainLabel.get(fileName)+"\n");
					//bwASM.write("\n");
				}
			}
			else
			{
				makeByteMap(byteCount);
				long totalCount = readByteFile(fileName, byteCount);
				
				TreeMap<String, Long> treeByteCount = new TreeMap<>();
				treeByteCount.putAll(byteCount);
				if(totalCount !=0)
				{
					Iterator begin = treeByteCount.entrySet().iterator();
					while(begin.hasNext())
					{
						Map.Entry pairs = (Map.Entry)begin.next();
						
						bwBYTE.write(roundOffTo2DecPlaces(Double.parseDouble(pairs.getValue().toString())*100000/totalCount)+",");
						
					}
					fileName = fileName.substring(0, fileName.indexOf(".byte"));
					bwBYTE.write(fileName+",");
					bwVirus.write(fileName+"\n");
					fileName = "\""+fileName+"\"";
					bwBYTE.write(trainLabel.get(fileName)+"\n");
					//bwBYTE.write("\n");
				}

			}	
		System.out.println(count++);
		}
		bwASM.close();
		bwBYTE.close();
		bwVirus.close();
	}
}
